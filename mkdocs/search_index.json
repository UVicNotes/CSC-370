{
    "docs": [
        {
            "location": "/", 
            "text": "CSC 370\n\n\nConnex\n\n\n\n\n Instructor\n: Alex Thomo\n\n\n Office\n: ECS 556\n\n\n Email\n: \nthomo@cs.uvic.ca\n\n\n Office Hours\n:\n\n\nWednesdays, 2:30 PM to 3:30 PM\n\n\nFridays, 3:30 PM to 4:30 PM\n\n\n\n\n\n\n\n\nOverview\n\n\nThis course is an introduction to database systems. Topics include database design, query languages, query optimization, concurrency control, and recovery from failures. The major topics to cover are:\n\n\n\n\nDatabase design\n\n\nRelational Algebra\n\n\nSQL\n\n\nData Analytics\n\n\nSecurity\n\n\nQuery evaluation\n\n\nTransaction Management\n\n\nRecovery from System Failures\n\n\nNoSQL Databases\n\n\n\n\nTextbook\n\n\n\n\nDatabase Systems: The Complete Book\n\n\nAuthor: Hector Garcia-Molina, Jeffrey D. Ullman, and   * Jennifer D. Widom\n\n\nPublisher: Prentice Hall\n\n\nISBN: 0131873253\n\n\nYear: 2008\n\n\nEdition: 2nd Edition\n\n\n\n\n\n\n\n\nAssessment\n\n\n\n\n\n\n\n\nTask\n\n\nWeight\n\n\n\n\n\n\n\n\n\n\nAssignments\n\n\n30%\n\n\n\n\n\n\nMidterm\n\n\n20%\n\n\n\n\n\n\nFinal\n\n\n50%", 
            "title": "Home"
        }, 
        {
            "location": "/#csc-370", 
            "text": "", 
            "title": "CSC 370"
        }, 
        {
            "location": "/#connex", 
            "text": "Instructor : Alex Thomo   Office : ECS 556   Email :  thomo@cs.uvic.ca   Office Hours :  Wednesdays, 2:30 PM to 3:30 PM  Fridays, 3:30 PM to 4:30 PM", 
            "title": "Connex"
        }, 
        {
            "location": "/#overview", 
            "text": "This course is an introduction to database systems. Topics include database design, query languages, query optimization, concurrency control, and recovery from failures. The major topics to cover are:   Database design  Relational Algebra  SQL  Data Analytics  Security  Query evaluation  Transaction Management  Recovery from System Failures  NoSQL Databases", 
            "title": "Overview"
        }, 
        {
            "location": "/#textbook", 
            "text": "Database Systems: The Complete Book  Author: Hector Garcia-Molina, Jeffrey D. Ullman, and   * Jennifer D. Widom  Publisher: Prentice Hall  ISBN: 0131873253  Year: 2008  Edition: 2nd Edition", 
            "title": "Textbook"
        }, 
        {
            "location": "/#assessment", 
            "text": "Task  Weight      Assignments  30%    Midterm  20%    Final  50%", 
            "title": "Assessment"
        }, 
        {
            "location": "/1-Introduction/", 
            "text": "Introduction\n\n\nWhat is a database?\n\n\ndefinition:\n A \ndatabase\n is a collection of information that exists over a long period of time.\n\n\nA \nDatabase Management System (DBMS)\n a complex system for managing database interactions.\n\n\n\n\nAllows users to \neasily\n create new databases and specify schema.\n\n\nEnables users for \nsearch\n and \nmodify\n data.\n\n\nStores data \nintelligently\n,\n\n\nProtects from accidental use\n\n\nAllows efficient access, e.g., indexing\n\n\n\n\n\n\nManages \ncuncurrent\n data accesses and modifications.\n\n\nRecovers from failures and crashes.\n\n\n\n\nRelational Databases\n\n\nA database system should present the user with a view of the data organized as \ntables\n (or \nrelations\n).\n\n\nSo \nRelations\n are represented as \nTables\n, column headers are \nattribute names\n. Each row is a \ntuple\n.\n\n\nAccess with \nStructured Query Language (SQL)\n.\n\n\ne.g.\n\n\nGiven the database\n\n\n\n\n\n\n\n\naccountNo\n\n\nbalance\n\n\ntype\n\n\n\n\n\n\n\n\n\n\n12345\n\n\n1000.00\n\n\nsavings\n\n\n\n\n\n\n67890\n\n\n2846.92\n\n\nchecking\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat\u2019s the balance of account \u201c67890\u201d?\n\n\n\n\nSELECT\n \nbalance\n\n\nFROM\n \nAccounts\n\n\nWHERE\n \naccountNo\n \n=\n \n67890\n;\n\n\n\n\n\n\n\n\nWhich are the savings accounts with negative balances?\n\n\n\n\nSELECT\n \naccountNo\n\n\nFROM\n \nAccounts\n\n\nWHERE\n \ntype\n \n=\n \n\u2018\nsavings\n\u2019\n \nAND\n \nbalance\n \n \n0\n;", 
            "title": "Introduction"
        }, 
        {
            "location": "/1-Introduction/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/1-Introduction/#what-is-a-database", 
            "text": "definition:  A  database  is a collection of information that exists over a long period of time.  A  Database Management System (DBMS)  a complex system for managing database interactions.   Allows users to  easily  create new databases and specify schema.  Enables users for  search  and  modify  data.  Stores data  intelligently ,  Protects from accidental use  Allows efficient access, e.g., indexing    Manages  cuncurrent  data accesses and modifications.  Recovers from failures and crashes.", 
            "title": "What is a database?"
        }, 
        {
            "location": "/1-Introduction/#relational-databases", 
            "text": "A database system should present the user with a view of the data organized as  tables  (or  relations ).  So  Relations  are represented as  Tables , column headers are  attribute names . Each row is a  tuple .  Access with  Structured Query Language (SQL) .", 
            "title": "Relational Databases"
        }, 
        {
            "location": "/1-Introduction/#eg", 
            "text": "Given the database     accountNo  balance  type      12345  1000.00  savings    67890  2846.92  checking           What\u2019s the balance of account \u201c67890\u201d?   SELECT   balance  FROM   Accounts  WHERE   accountNo   =   67890 ;    Which are the savings accounts with negative balances?   SELECT   accountNo  FROM   Accounts  WHERE   type   =   \u2018 savings \u2019   AND   balance     0 ;", 
            "title": "e.g."
        }, 
        {
            "location": "/2-Entity-Relationship-Model/", 
            "text": "Entity Relationship Model\n\n\ndefinition:\n The \nEntity Relationship Model\n is a notation for expressing database designs.\n\n\nIn the database both \nentities\n and \nrelationships\n will be translated to \nrelations\n (tables).\n\n\nExample\n\n\nWe can represent a database for movies as follows,\n\n\n\n\nIn this diagram,\n\n\n\n\nSquares\n represent entities.\n\n\nCircles\n represent attributes.\n\n\nDiamonds\n represent relations.\n\n\nArrows\n represent a singular relations.\n\n\n\n\nSo \none\n studio \nowns\n \nmany\n movies.\n\n\nKeys\n\n\ndefinition\n: A \nkey\n is an attribute, or a set of attributes, such that no two entities have the same key.\n\n\nIn Entity-Relationship diagrams we \nunderline\n the keys,\n\n\n\n\nSurrogate Keys\n\n\ndefinition\n: A \nsurrogate key\n is a unique identifier which only serves to be the key for an entity. For example a student number or Social Insurance Number (SIN) is a surrogate key.\n\n\nRules\n\n\nAn entity set should satisfy one of the following\n\n\n\n\nIt\ns more then the name of something, i.e., it has a non-key attribute.\n\n\nIt\ns the \nmany\n side in a relationship.\n\n\n\n\nExample\n\n\nGive an E/R diagram for a database recording information about teams, players, and their fans, including:\n\n\n\n\nFor each team, its name, its players, its team captain (one of its players), and the colors of its uniform.\n\n\nFor each player, his/her name.\n\n\nFor each fan, his/her name, favorite teams, favorite players, and favorite color.\n\n\n\n\nSolution\n\n\n\n\nSubclasses\n\n\ndefinition\n: Sometimes in an entity set or class you have have different types of that entity set, \nsubclasses\n.\n\n\nWeak Entity Sets\n\n\ndefinition\n: An entity set is said to be \nweak\n if we need to follow one or more \nmany-to-one\n relationships to uniquely identify the entity set.\n\n\nA \nsurrogate key\n can be used to avoid creating weak entity sets.\n\n\nExample\n\n\nFor football players \nname\n and \nnumber\n are not enough to identify them (since two players \ncould\n have the same name and the same player number), so require the teams \nname\n, related by \nplays-on\n to uniquely identify them.", 
            "title": "Entity/Relationship Model"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#entity-relationship-model", 
            "text": "definition:  The  Entity Relationship Model  is a notation for expressing database designs.  In the database both  entities  and  relationships  will be translated to  relations  (tables).", 
            "title": "Entity Relationship Model"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#example", 
            "text": "We can represent a database for movies as follows,   In this diagram,   Squares  represent entities.  Circles  represent attributes.  Diamonds  represent relations.  Arrows  represent a singular relations.   So  one  studio  owns   many  movies.", 
            "title": "Example"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#keys", 
            "text": "definition : A  key  is an attribute, or a set of attributes, such that no two entities have the same key.  In Entity-Relationship diagrams we  underline  the keys,", 
            "title": "Keys"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#surrogate-keys", 
            "text": "definition : A  surrogate key  is a unique identifier which only serves to be the key for an entity. For example a student number or Social Insurance Number (SIN) is a surrogate key.", 
            "title": "Surrogate Keys"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#rules", 
            "text": "An entity set should satisfy one of the following   It s more then the name of something, i.e., it has a non-key attribute.  It s the  many  side in a relationship.", 
            "title": "Rules"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#example_1", 
            "text": "Give an E/R diagram for a database recording information about teams, players, and their fans, including:   For each team, its name, its players, its team captain (one of its players), and the colors of its uniform.  For each player, his/her name.  For each fan, his/her name, favorite teams, favorite players, and favorite color.", 
            "title": "Example"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#solution", 
            "text": "", 
            "title": "Solution"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#subclasses", 
            "text": "definition : Sometimes in an entity set or class you have have different types of that entity set,  subclasses .", 
            "title": "Subclasses"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#weak-entity-sets", 
            "text": "definition : An entity set is said to be  weak  if we need to follow one or more  many-to-one  relationships to uniquely identify the entity set.  A  surrogate key  can be used to avoid creating weak entity sets.", 
            "title": "Weak Entity Sets"
        }, 
        {
            "location": "/2-Entity-Relationship-Model/#example_2", 
            "text": "For football players  name  and  number  are not enough to identify them (since two players  could  have the same name and the same player number), so require the teams  name , related by  plays-on  to uniquely identify them.", 
            "title": "Example"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/", 
            "text": "E/R Diagrams to Relations\n\n\nTable Terminology\n\n\nIn a table\n\n\n\n\nHeadings\n are \nattribute names\n.\n\n\nRows\n are \ntuples\n.\n\n\nElements\n in rows are tuple components\n\n\n\n\nEntity Sets to Relations\n\n\nExample\n\n\n\n\nThe tables are,\n\n\n\n\nMovies\n: (\ntitle\n, \nyear\n, \nlength\n, \nfilmType\n, \nstudioName\n) \n\n\nStudios\n: (\nname\n, \naddress\n)\n\n\nStars\n: (\nname\n, \naddress\n)\n\n\nStarsIn\n: (\ntitle\n, \nyear\n, \nstarName\n)\n\n\n\n\nThe \nmovies\n table would look like,\n\n\n\n\n\n\n\n\ntitle\n\n\nyear\n\n\nlength\n\n\nfilmType\n\n\nstudioName\n\n\n\n\n\n\n\n\n\n\nGodzilla\n\n\n2014\n\n\n200\n\n\nfeature\n\n\nFox\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nisa\n Relationships\n\n\nWe can use \nisa\n relationships to show inheritance relations.\n\n\n\n\nWe use two approaches to \n\n\nObject-Oriented Approach\n\n\nIn the \nObject-Oriented (OO)\n approach, every subclass has it\ns own relation. For the example above we have the following tables\n\n\n\n\nMovies(title, year, length, filmType)\n\n\nCartoons(title, year, length, filmType)\n\n\nMurderMysteries(title, year, length, filmType, weapon)\n\n\nCartoon-MurderMysteries(title, year, length, filmType, weapon)\n\n\nVoices(title, year, starName)\n\n\n\n\nIssue\n: This approach requires many tables to implement, specifically if we have a root and $n$ children we require $2^n$ tables.\n\n\nEntity/Relationship Approach\n\n\nIn the \nEntity-Relationship\n approach, which is most common, the example above has the following tables\n\n\n\n\nMovies(title, year, length, filmType)\n\n\nMurderMystery(title, year, weapon)\n\n\nCartoons(title, year)\n\n\nVoices(title, year, name)\n\n\n\n\nIssue\n: We must do several table lookups to get the information for a single object. For example if we want the \nlength\n and \nweapon\n for a murder mystery we have to look in \nMovies\n and \nMurderMystery\n.", 
            "title": "E/R Diagrams to Relations"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#er-diagrams-to-relations", 
            "text": "", 
            "title": "E/R Diagrams to Relations"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#table-terminology", 
            "text": "In a table   Headings  are  attribute names .  Rows  are  tuples .  Elements  in rows are tuple components", 
            "title": "Table Terminology"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#entity-sets-to-relations", 
            "text": "", 
            "title": "Entity Sets to Relations"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#example", 
            "text": "The tables are,   Movies : ( title ,  year ,  length ,  filmType ,  studioName )   Studios : ( name ,  address )  Stars : ( name ,  address )  StarsIn : ( title ,  year ,  starName )   The  movies  table would look like,     title  year  length  filmType  studioName      Godzilla  2014  200  feature  Fox", 
            "title": "Example"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#isa-relationships", 
            "text": "We can use  isa  relationships to show inheritance relations.   We use two approaches to", 
            "title": "isa Relationships"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#object-oriented-approach", 
            "text": "In the  Object-Oriented (OO)  approach, every subclass has it s own relation. For the example above we have the following tables   Movies(title, year, length, filmType)  Cartoons(title, year, length, filmType)  MurderMysteries(title, year, length, filmType, weapon)  Cartoon-MurderMysteries(title, year, length, filmType, weapon)  Voices(title, year, starName)   Issue : This approach requires many tables to implement, specifically if we have a root and $n$ children we require $2^n$ tables.", 
            "title": "Object-Oriented Approach"
        }, 
        {
            "location": "/3-ER-diagrams-and-Relations/#entityrelationship-approach", 
            "text": "In the  Entity-Relationship  approach, which is most common, the example above has the following tables   Movies(title, year, length, filmType)  MurderMystery(title, year, weapon)  Cartoons(title, year)  Voices(title, year, name)   Issue : We must do several table lookups to get the information for a single object. For example if we want the  length  and  weapon  for a murder mystery we have to look in  Movies  and  MurderMystery .", 
            "title": "Entity/Relationship Approach"
        }, 
        {
            "location": "/4-SQL/", 
            "text": "Structured Query Language (SQL)\n\n\nStrutured Query Language (SQL)\n, \noften prounounced \nSequel\n, is a programming language for manipulating databases.\n\n\nSQL Common Data Types\n\n\n\n\n\n\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nCHARACTER(n)\n\n\nCharacter string. Fixed-length \nn\n.\n\n\n\n\n\n\nVARCHAR(n)\n\n\nCharacter string. Variable length. Maximum length \nn\n.\n\n\n\n\n\n\nBINARY(n)\n\n\nBinary string. Fixed-length \nn\n.\n\n\n\n\n\n\nBOOLEAN\n\n\nStores \nTRUE\n or \nFALSE\n values.\n\n\n\n\n\n\nVARBINARY(n)\n\n\nBinary string. Variable length. Maximum length \nn\n.\n\n\n\n\n\n\nINTEGER(p)\n\n\nInteger numerical (no decimal). Precision \np\n.\n\n\n\n\n\n\nDATE\n\n\nStores year, month, and day values.\n\n\n\n\n\n\nTIME\n\n\nStores hour, minute, and second values.\n\n\n\n\n\n\nTIMESTAMP\n\n\nStores year, month, day, hour, minute, and second values.\n\n\n\n\n\n\nARRAY\n\n\nA set-length and ordered collection of elements.\n\n\n\n\n\n\nMULTISET\n\n\nA variable-length and unordered collection of elements.\n\n\n\n\n\n\nXML\n\n\nStores XML data.\n\n\n\n\n\n\n\n\nCreating Tables\n\n\nWe can create a table with the \nCREATE\n command\n\n\nCREATE\n \nTABLE\n \nStudios\n(\n\n  \nname\n \nVARCHAR\n(\n20\n),\n\n  \nwebsite\n \nVARCHAR\n(\n255\n)\n\n\n);\n\n\n\n\n\n\nCreating with Primary Keys\n\n\nTo assign a single primary Keys\n\n\nCREATE\n \nTABLE\n \nStudios\n(\n\n  \nname\n \nVARCHAR\n(\n20\n)\n \nPRIMARY\n \nKEY\n,\n\n  \nwebsite\n \nVARCHAR\n(\n255\n)\n\n\n);\n\n\n\n\n\n\nTo assign multiple primary Keys\n\n\nCREATE\n \nTABLE\n \nMovies\n \n(\n\n  \ntitle\n \nVARCHAR\n(\n50\n),\n\n  \nyear\n \nINT\n,\n\n  \nlength\n \nINT\n,\n\n  \nrating\n \nCHAR\n(\n2\n),\n\n  \nstudioname\n \nVARCHAR\n(\n20\n),\n\n  \nPRIMARY\n \nKEY\n \n(\ntitle\n,\n \nyear\n)\n\n\n);", 
            "title": "Structured Query Language"
        }, 
        {
            "location": "/4-SQL/#structured-query-language-sql", 
            "text": "Strutured Query Language (SQL) ,  often prounounced  Sequel , is a programming language for manipulating databases.", 
            "title": "Structured Query Language (SQL)"
        }, 
        {
            "location": "/4-SQL/#sql-common-data-types", 
            "text": "Data type  Description      CHARACTER(n)  Character string. Fixed-length  n .    VARCHAR(n)  Character string. Variable length. Maximum length  n .    BINARY(n)  Binary string. Fixed-length  n .    BOOLEAN  Stores  TRUE  or  FALSE  values.    VARBINARY(n)  Binary string. Variable length. Maximum length  n .    INTEGER(p)  Integer numerical (no decimal). Precision  p .    DATE  Stores year, month, and day values.    TIME  Stores hour, minute, and second values.    TIMESTAMP  Stores year, month, day, hour, minute, and second values.    ARRAY  A set-length and ordered collection of elements.    MULTISET  A variable-length and unordered collection of elements.    XML  Stores XML data.", 
            "title": "SQL Common Data Types"
        }, 
        {
            "location": "/4-SQL/#creating-tables", 
            "text": "We can create a table with the  CREATE  command  CREATE   TABLE   Studios ( \n   name   VARCHAR ( 20 ), \n   website   VARCHAR ( 255 )  );", 
            "title": "Creating Tables"
        }, 
        {
            "location": "/4-SQL/#creating-with-primary-keys", 
            "text": "To assign a single primary Keys  CREATE   TABLE   Studios ( \n   name   VARCHAR ( 20 )   PRIMARY   KEY , \n   website   VARCHAR ( 255 )  );   To assign multiple primary Keys  CREATE   TABLE   Movies   ( \n   title   VARCHAR ( 50 ), \n   year   INT , \n   length   INT , \n   rating   CHAR ( 2 ), \n   studioname   VARCHAR ( 20 ), \n   PRIMARY   KEY   ( title ,   year )  );", 
            "title": "Creating with Primary Keys"
        }, 
        {
            "location": "/5-Relational-Algebra/", 
            "text": "Relational Algebra\n\n\ndefintion\n: In the relational model, operations can be expressed in algebra called \nrelational algebra\n. In relational algebra, \nrelations\n are the \noperands\n and we apply \noperators\n to them.\n\n\nBasic Operations\n\n\n\n\nUnion, $\\cup$\n\n\nIntersection, $\\cap$\n\n\nDifference, $-$\n\n\n\n\nRemoval Operations\n\n\nSelection\n\n\nSelection ($\\sigma$) eliminates some rows, for example\n\n\n\n\n\n  \\sigma_{A < 2}(R)\n\n\n\n\n\nis a new relation with rows from $R$ where $A$ is less than $2$.\n\n\nProjection\n\n\nProjection ($\\pi$) eliminates some columns, for example\n\n\n\n\n\n  \\pi_{A_1,\\ldots,A_n}(R)\n\n\n\n\n\nis a new relation with columns $A_1,\\ldots,A_n$ from $R$.", 
            "title": "Relational Algebra"
        }, 
        {
            "location": "/5-Relational-Algebra/#relational-algebra", 
            "text": "defintion : In the relational model, operations can be expressed in algebra called  relational algebra . In relational algebra,  relations  are the  operands  and we apply  operators  to them.", 
            "title": "Relational Algebra"
        }, 
        {
            "location": "/5-Relational-Algebra/#basic-operations", 
            "text": "Union, $\\cup$  Intersection, $\\cap$  Difference, $-$", 
            "title": "Basic Operations"
        }, 
        {
            "location": "/5-Relational-Algebra/#removal-operations", 
            "text": "", 
            "title": "Removal Operations"
        }, 
        {
            "location": "/5-Relational-Algebra/#selection", 
            "text": "Selection ($\\sigma$) eliminates some rows, for example   \n  \\sigma_{A < 2}(R)   is a new relation with rows from $R$ where $A$ is less than $2$.", 
            "title": "Selection"
        }, 
        {
            "location": "/5-Relational-Algebra/#projection", 
            "text": "Projection ($\\pi$) eliminates some columns, for example   \n  \\pi_{A_1,\\ldots,A_n}(R)   is a new relation with columns $A_1,\\ldots,A_n$ from $R$.", 
            "title": "Projection"
        }
    ]
}